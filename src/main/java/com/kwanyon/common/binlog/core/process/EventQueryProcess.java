package com.kwanyon.common.binlog.core.process;

import com.github.shyiko.mysql.binlog.event.EventType;
import com.github.shyiko.mysql.binlog.event.QueryEventData;
import com.kwanyon.common.binlog.config.IBinlogProperties;
import com.kwanyon.common.binlog.constant.BinlogConst;
import com.kwanyon.common.binlog.core.message.BinlogMessage;
import com.kwanyon.common.binlog.core.message.RenameMessage;
import com.kwanyon.common.binlog.core.parser.AlterEventParser;
import com.kwanyon.common.binlog.core.parser.CreateEventParser;
import com.kwanyon.common.binlog.core.parser.DropEventParser;
import com.kwanyon.common.binlog.core.parser.RenameEventParser;
import com.kwanyon.common.binlog.core.table.TableSchemaManager;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;

/**
 * 此事件操作的是修改表结构,修改后需要将缓存中存储的表结构删除
 * 解析得出修改表结构的 sql 语句进行解析
 * sql='ALTER TABLE `db_name`.`table_name`后面是具体的执行语句
 *
 * @author Alay
 * @since 2022-11-15 11:30
 */
@RequiredArgsConstructor
public class EventQueryProcess implements BinlogEventProcess<QueryEventData> {
    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    private final IBinlogProperties binlogProperties;
    private final TableSchemaManager tableSchemaManager;

    private final DropEventParser dropEventParser = new DropEventParser();
    private final AlterEventParser alterEventParser = new AlterEventParser();
    private final CreateEventParser createEventParser = new CreateEventParser();
    private final RenameEventParser renameEventParser = new RenameEventParser();


    @Override
    public boolean support(EventType eventType) {
        return EventType.QUERY == eventType;
    }

    @Override
    public BinlogMessage process(QueryEventData eventData) {
        String sql = eventData.getSql();

        // INSERT、UPDATE、DELETE 的事件，不做处理
        if (BinlogConst.EVENT_SQL_BEGIN.equals(sql)) return null;

        BinlogMessage binlogMessage = null;
        // 修改表事件
        if (sql.startsWith(BinlogConst.EVENT_SQL_ALTER)) {
            sql = this.beautifySql(sql);
            // sql 美化
            eventData.setSql(sql);

            logger.info("binlog 修改表事件 SQL: {}", sql);
            binlogMessage = alterEventParser.parseEvent(eventData);

            // 修改表结构,删除缓存
            tableSchemaManager.removeSchema(binlogMessage.getSchema(), binlogMessage.getTableName());
        }

        // 新增表事件
        if (sql.startsWith(BinlogConst.EVENT_SQL_CREATE)) {
            sql = this.beautifySql(sql);
            // sql 美化
            eventData.setSql(sql);

            logger.info("binlog 新增表事件 SQL: {}", sql);
            binlogMessage = createEventParser.parseEvent(eventData);
        }

        // 删除表事件
        if (sql.startsWith(BinlogConst.EVENT_SQL_DROP)) {
            //  DROP TABLE IF EXISTS `t_student` /* generated by server */
            sql = sql.substring(0, sql.indexOf("/*"));
            sql = this.beautifySql(sql);
            // sql 美化
            eventData.setSql(sql);

            logger.info("binlog 删除表事件 SQL: {}", sql);
            binlogMessage = dropEventParser.parseEvent(eventData);

            // 修改表结构,删除缓存
            tableSchemaManager.removeSchema(binlogMessage.getSchema(), binlogMessage.getTableName());
        }

        // 表名重命名 RENAME TABLE `database`.`table_name` TO `database`.`new_table_name`
        if (sql.startsWith(BinlogConst.EVENT_SQL_RENAME)) {
            sql = this.beautifySql(sql);
            // sql 美化
            eventData.setSql(sql);

            // RENAME TABLE `database`.`table_name` TO `database`.`new_table_name`
            RenameMessage renameMessage = renameEventParser.parseEvent(eventData);
            // 修改表结构,删除缓存
            tableSchemaManager.removeSchema(renameMessage.getSchema(), renameMessage.getBeforeTable());
            binlogMessage = renameMessage;
        }
        // 不是我需要处理的事件,不做处理
        if (null == binlogMessage) return null;

        // 判断是否需要处理此表的日志相关
        List<String> tables = binlogProperties.tables();
        // 不需要处理,不属于处理的表名中
        if (!tables.contains(binlogMessage.getTableName())) return null;

        return binlogMessage;
    }

    /**
     * 美化Sql
     * sql = sql.replace("\n", "").replace("\t", "").replace("  ", " ").replace("( ", "(").replace(" )", ")").replace(" ,", ",");
     */
    private String beautifySql(String sql) {
        sql = sql.replaceAll("[\\s\n]+", " ");
        // 去除尾部空格
        char[] chars = sql.toCharArray();
        char blank = ' ';
        for (int i = chars.length - 1; i >= 0; i--) {
            char c = chars[i];
            if (blank != c) break;
            sql = sql.substring(0, i);
        }
        return sql;
    }

}
